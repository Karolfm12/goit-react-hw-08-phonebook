{"version":3,"file":"static/js/135.56fa5817.chunk.js","mappings":"+NAAaA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAS,EAC/CC,EAAS,SAAAF,GAAK,OAAIA,EAAMC,SAASC,MAAO,E,SCKtC,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXJ,GAAWK,EAAAA,EAAAA,IAAYP,GACvBQ,GAAcD,EAAAA,EAAAA,IAAYJ,GAWhC,OATAM,EAAAA,EAAAA,YAAU,WACRJ,GAASK,EAAAA,EAAAA,MACX,GAAG,CAACL,KAEJI,EAAAA,EAAAA,YAAU,WACRE,QAAQC,IAAI,YAAaV,GACzBS,QAAQC,IAAI,gBAAiBJ,EAC/B,GAAG,CAACN,EAAUM,KAGZK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAAAF,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,qBAETF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CACmB,YAAhBP,GAA6B,yBACb,cAAhBA,IACCK,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAAD,UACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBAGRC,EAAAA,EAAAA,KAAA,SAAAD,SACGb,EAASgB,KAAI,SAAAC,GAAO,OACnBN,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAQC,QACbJ,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAQE,UAFNF,EAAQG,GAQZ,SAKI,WAAhBd,IAA4BQ,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kCAIxC,C","sources":["tasksContacts/selectors.js","pages/ContactList.js"],"sourcesContent":["export const contactList = state => state.contacts.contacts;\nexport const status = state => state.contacts.status;\n// export const filterState = state => state.contacts.filter;\n","import { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'tasksContacts/operations';\nimport { contactList, status } from 'tasksContacts/selectors';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  //   const isLoading = useSelector(selectLoading);\n  const contacts = useSelector(contactList);\n  const fetchStatus = useSelector(status);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    console.log('Contacts:', contacts);\n    console.log('Fetch Status:', fetchStatus);\n  }, [contacts, fetchStatus]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>\n        {fetchStatus === 'loading' && 'Request in progress...'}\n        {fetchStatus === 'succeeded' && (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Phone</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {contacts.map(contact => (\n                <tr key={contact.id}>\n                  <td>{contact.name}</td>\n                  <td>{contact.phone}</td>\n                  {/* <td>\n                  <button onClick={() => handleOnDelete(contact.id)}>\n                    Delete\n                  </button>\n                </td> */}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n        {fetchStatus === 'failed' && <p>Error fetching contacts.</p>}\n      </div>\n    </>\n  );\n}\n"],"names":["contactList","state","contacts","status","ContactList","dispatch","useDispatch","useSelector","fetchStatus","useEffect","fetchContacts","console","log","_jsxs","_Fragment","children","_jsx","Helmet","map","contact","name","phone","id"],"sourceRoot":""}